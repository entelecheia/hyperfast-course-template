[project]
name = "{{ project_name }}"
dynamic = ["version"]
description = "{{ project_short_description }}"
authors = [{ name = "{{ author }}", email = "{{ email }}" }]
license = { text = "{{ project_license }}" }
readme = "README.md"
requires-python = ">=3.9"
keywords = []
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "click>=8.1.3",
    "pyyaml>=6.0.2",
]

[project.urls]
Homepage = "{{ documentation_url }}"
Repository = "https://github.com/{{ github_username }}/{{ github_repo_name }}"

{% if build_and_release and package_scripts -%}
[project.scripts]
{% for script in package_scripts -%}
{{ script }}{{ "\n" if not loop.last }}
{%- endfor %}
{%- endif %}

[project.optional-dependencies]
dev = [
    "python-semantic-release>=7.33.1",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pytest>=7.2.1",
    "pytest-cov>=4.0.0",
    "deptry>=0.16.0",
    "types-PyYAML>=6.0.12",
]

{% if poe_task_files -%}
[tool.poe]
include = {{ poe_task_files|to_json }}
{%- endif %}

[tool.ruff]
target-version = "py39"
line-length = 88
extend-exclude = [
    "_version.py",
    ".refs",
    ".copier-template",
    "tests",
    "docs",
    "book",
    "_build",
    "node_modules",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"_version.py" = ["W292"]

[tool.mypy]
namespace_packages = true
exclude = ["node_modules", "build", "_build", "dist", "docs", "tests", "venv", ".copier-template", ".refs"]
# 3rd party import
ignore_missing_imports = true
# dynamic typing
disallow_any_unimported = true
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = true
disallow_any_generics = false
disallow_subclassing_any = true
# platform
python_version = "3.8"
# untyped
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
# None and Optional
no_implicit_optional = true
# Warnings
warn_return_any = false
warn_unreachable = true
# Misc
pretty = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:cacheprovider" # deactivating pytest caching.

[tool.coverage.report]
exclude_lines = ['if __name__ == "__main__":']

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"

[tool.semantic_release]
branch = "main"
version_toml = ["pyproject.toml:project.version"]
{% if build_and_release -%}
version_variable = "src/{{ package_name }}/_version.py:__version__"
{% endif -%}
version_source = "tag"
commit_version_number = true # required for version_source = "tag"
commit_subject = "chore(release): :rocket: {version} [skip ci]"
prerelease_tag = "rc"
major_on_zero = true
tag_commit = true
changelog_file = "CHANGELOG.md"
upload_to_repository = {{ upload_to_repository|to_json }}
upload_to_release = {{ upload_to_release|to_json }}
hvcs = "github" # hosting version control system, gitlab is also supported
{% if build_and_release -%}
build_command = "uv build"
{% else -%}
build_command = "mkdir -p dist && echo 'No build command configured' > dist/release.txt"
{%- endif %}

{% if build_and_release -%}
[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
{% if build_and_release -%}
raw-options = { local_scheme = "no-local-version" }
{% endif -%}

[tool.hatch.build.targets.wheel]
packages = ["src/{{ package_name }}"]
{% endif -%}

[tool.deptry]
extend_exclude = [
    ".copier-template",
    ".refs",
    "_build",
    "book",
    "docs",
    "node_modules",
    "tests",
]
ignore = ["DEP002", "DEP003"]  # Ignore unused dev dependencies and transitive imports
ignore_notebooks = true
